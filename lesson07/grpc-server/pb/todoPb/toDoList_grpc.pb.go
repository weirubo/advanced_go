// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package todoPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToDoListClient is the client API for ToDoList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToDoListClient interface {
	CreateToDoList(ctx context.Context, in *ToDoListDetail, opts ...grpc.CallOption) (*CreateToDoListResult, error)
	ReadToDoList(ctx context.Context, in *ToDoListPage, opts ...grpc.CallOption) (*ReadToDoListByPage, error)
}

type toDoListClient struct {
	cc grpc.ClientConnInterface
}

func NewToDoListClient(cc grpc.ClientConnInterface) ToDoListClient {
	return &toDoListClient{cc}
}

func (c *toDoListClient) CreateToDoList(ctx context.Context, in *ToDoListDetail, opts ...grpc.CallOption) (*CreateToDoListResult, error) {
	out := new(CreateToDoListResult)
	err := c.cc.Invoke(ctx, "/ToDoList/CreateToDoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoListClient) ReadToDoList(ctx context.Context, in *ToDoListPage, opts ...grpc.CallOption) (*ReadToDoListByPage, error) {
	out := new(ReadToDoListByPage)
	err := c.cc.Invoke(ctx, "/ToDoList/ReadToDoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToDoListServer is the server API for ToDoList service.
// All implementations must embed UnimplementedToDoListServer
// for forward compatibility
type ToDoListServer interface {
	CreateToDoList(context.Context, *ToDoListDetail) (*CreateToDoListResult, error)
	ReadToDoList(context.Context, *ToDoListPage) (*ReadToDoListByPage, error)
	mustEmbedUnimplementedToDoListServer()
}

// UnimplementedToDoListServer must be embedded to have forward compatible implementations.
type UnimplementedToDoListServer struct {
}

func (UnimplementedToDoListServer) CreateToDoList(context.Context, *ToDoListDetail) (*CreateToDoListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToDoList not implemented")
}
func (UnimplementedToDoListServer) ReadToDoList(context.Context, *ToDoListPage) (*ReadToDoListByPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadToDoList not implemented")
}
func (UnimplementedToDoListServer) mustEmbedUnimplementedToDoListServer() {}

// UnsafeToDoListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToDoListServer will
// result in compilation errors.
type UnsafeToDoListServer interface {
	mustEmbedUnimplementedToDoListServer()
}

func RegisterToDoListServer(s grpc.ServiceRegistrar, srv ToDoListServer) {
	s.RegisterService(&ToDoList_ServiceDesc, srv)
}

func _ToDoList_CreateToDoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToDoListDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoListServer).CreateToDoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ToDoList/CreateToDoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoListServer).CreateToDoList(ctx, req.(*ToDoListDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoList_ReadToDoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToDoListPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoListServer).ReadToDoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ToDoList/ReadToDoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoListServer).ReadToDoList(ctx, req.(*ToDoListPage))
	}
	return interceptor(ctx, in, info, handler)
}

// ToDoList_ServiceDesc is the grpc.ServiceDesc for ToDoList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToDoList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ToDoList",
	HandlerType: (*ToDoListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToDoList",
			Handler:    _ToDoList_CreateToDoList_Handler,
		},
		{
			MethodName: "ReadToDoList",
			Handler:    _ToDoList_ReadToDoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/toDoList.proto",
}
